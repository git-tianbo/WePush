<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
             version="3.0" metadata-complete="true">

<!--    <?xml version="1.0" encoding="UTF-8"?>-->
<!--    <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"-->
<!--             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee-->
<!--    http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"-->
<!--             version="4.0" metadata-complete="true">-->

    <!--添加spring容器监听器-->

<!--    必须需要<listener>，而<context-param>可有可无-->
<!--    默认参数是/WEB/INF/applicationContext.xml     因此要用context-param添加路径         -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

<!--    第一种方式-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--    在J2EE工程中web服务器启动的时候最先调用web.xml，上面这段配置的意思是加载spring的监听器-->
<!--    其中ContextLoaderListener的作用就是启动Web容器时，自动装配applicationContext.xml的配置信息，执行它所实现的方法。-->

<!--  第二种方式-->
<!--    <servlet>-->
<!--        <servlet-name>context</servlet-narne>-->
<!--        <servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>-->
<!--        <load-on-startup>1</load-on-startup>-->
<!--    </servlet-->

<!--配置前端控制器-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--       全局初始化参数-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

<!--   第一次发请求时就创建servlet类    然后servlet初始化参数加载springmvc.xml  -->
<!--   配置 servlet 的对象的创建时间点：应用加载时创建。  取值只能是非 0 正整数，表示启动顺序  -->

<!--        Web应用启动时立即创建Servlet实例，即load-on-start Servlet-->

        <load-on-startup>1</load-on-startup>
    </servlet>


<!--    指定相对于Servlet的URL的路径。该路径相对于web应用程序上下文的根路径。-->
<!--    <servlet-mapping>将URL模式映射到某个Servlet，即该Servlet处理的URL。-->

<!--拦截请求-->
<!--    1. /* 拦截所有 jsp js png .css 真的全拦截 建议不使用-->
<!--    2. *.action *.do 拦截以do action结尾的请求 肯定能使用 ERP-->
<!--    3. / 拦截所有 （不包括jsp) (包含.js .png.css) 强烈建议使用-->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


<!--    解决中文乱码的问题-->
<filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<init-param>
    <param-name>encoding</param-name>
    <param-value>UTF-8</param-value>
</init-param>
<init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
</init-param>
</filter>

<!--    映射关系配置   -->
<filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>


    <!--    浏览器只支持Post和get的方式，想要实现delete和put的方式，需要使用过滤器HiddenHttpMethodFilter-->
    <filter>
        <filter-name>hidden</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>


    <filter-mapping>
        <filter-name>hidden</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    </web-app>